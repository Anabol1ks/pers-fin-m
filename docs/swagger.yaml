definitions:
  auth.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.VerificationCodeInput:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  models.Category:
    properties:
      color:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      isDefault:
        type: boolean
      name:
        type: string
      updatedAt:
        type: string
      userID:
        description: nil для дефолтных категорий
        type: integer
    type: object
  response.BalanceResponse:
    properties:
      balance:
        type: number
    type: object
  response.BonusResponse:
    properties:
      balance:
        type: number
    type: object
  response.ErrorResponse:
    description: Стандартный ответ при ошибке
    properties:
      error:
        type: string
    type: object
  response.SuccessResponse:
    description: Стандартный ответ при успешном выполнении
    properties:
      message:
        type: string
    type: object
  response.TokenResponse:
    properties:
      token:
        example: Ваш токен
        type: string
    type: object
  transactions.TransactionInput:
    properties:
      amount:
        type: number
      bonusChange:
        type: number
      category:
        type: integer
      currency:
        type: string
      date:
        type: string
      description:
        type: string
      title:
        type: string
      type:
        enum:
        - income
        - expense
        type: string
      typeBonus:
        type: string
    required:
    - amount
    - title
    - type
    type: object
  transactions.TransactionUpdate:
    properties:
      amount:
        type: number
      bonusChange:
        type: number
      category:
        type: integer
      currency:
        type: string
      date:
        type: string
      description:
        type: string
      title:
        type: string
      type:
        enum:
        - income
        - expense
        type: string
      typeBonus:
        type: string
    type: object
  users.UpdateBalanceInput:
    properties:
      balance:
        type: number
    required:
    - balance
    type: object
  users.UpdateBonusInput:
    properties:
      bonus:
        type: number
    required:
    - bonus
    type: object
  сategory.CreateCategoryInput:
    properties:
      color:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  сategory.UpdateCategoryInput:
    properties:
      color:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  title: Персональный финансовый менеджер
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя с указанием почты и пароля
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Описание ошибки валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Неверный пароль
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Пользователя с такой почтой не существует
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Авторизация
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрация пользователя с указанием никнейма, почты, пароля
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Описание ошибки валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Почта уже зарегистрированы
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Не удалось хешировать пароль или создать пользователя
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Подтверждение аккаунта пользователя с указанием почты и кода подтверждения
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.VerificationCodeInput'
      produces:
      - application/json
      responses:
        "200":
          description: Аккаунт успешно подтверждён
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Неверный код подтверждения
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Пользователь не существует
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Аккаунт уже подтверждён
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Подтверждение аккаунта
      tags:
      - auth
  /categories:
    get:
      description: Получить все категории пользователя или категории по умолчанию
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Ошибка при получении категорий
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить категории
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Создать новую категорию для пользователя
      parameters:
      - description: Категория для создания
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/%D1%81ategory.CreateCategoryInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка создания категории
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать категорию
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Удалить категорию пользователя
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Категория успешно удалена
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Категория не найдена или не принадлежит пользователю
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка удаления категории
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить категорию
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Обновить информацию о категории пользователя
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: string
      - description: Категория для обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/%D1%81ategory.UpdateCategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: Категория успешно обновлена
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Категория не найдена
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка обновления категории
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить категорию
      tags:
      - Categories
  /transactions:
    post:
      consumes:
      - application/json
      description: Создает новую транзакцию для пользователя
      parameters:
      - description: Транзакция для создания
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/transactions.TransactionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/transactions.TransactionInput'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка создания транзакции
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать транзакцию
      tags:
      - Transactions
  /transactions/{id}:
    delete:
      description: Удаляет транзакцию пользователя по ее ID
      parameters:
      - description: ID транзакции
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Транзакция удалена
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Транзакция не найдена
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка при удалении транзакции
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить транзакцию
      tags:
      - Transactions
    put:
      consumes:
      - application/json
      description: Обновляет существующую транзакцию пользователя
      parameters:
      - description: ID транзакции
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления транзакции
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/transactions.TransactionUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленная транзакция
          schema:
            $ref: '#/definitions/transactions.TransactionInput'
        "400":
          description: Ошибка валидации или неверные данные
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Транзакция не найдена
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка обновления транзакции
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить транзакцию
      tags:
      - Transactions
  /transactions/search:
    get:
      description: Ищет транзакции пользователя по различным опциональным параметрам
      parameters:
      - description: Название транзакции (частичное совпадение)
        in: query
        name: title
        type: string
      - description: Приблизительная сумма транзакции
        in: query
        name: amount
        type: integer
      - description: Приблизительное количество бонусов
        in: query
        name: bonusChange
        type: number
      - description: Дата транзакции (формат YYYY-MM-DD)
        in: query
        name: date
        type: string
      - description: ID категории
        in: query
        name: category
        type: integer
      - description: Тип транзакции (income или expense)
        in: query
        name: type
        type: string
      - description: Тип бонуса
        in: query
        name: typeBonus
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Найденные транзакции
          schema:
            items:
              $ref: '#/definitions/transactions.TransactionInput'
            type: array
        "500":
          description: Ошибка при поиске транзакций
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Поиск транзакций
      tags:
      - Transactions
  /users/balance:
    get:
      description: Получает текущий баланс пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Баланс пользователя
          schema:
            $ref: '#/definitions/response.BalanceResponse'
        "500":
          description: Ошибка при получении баланса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить текущий баланс пользователя
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновляет баланс пользователя
      parameters:
      - description: Новый баланс
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.UpdateBalanceInput'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленный баланс
          schema:
            $ref: '#/definitions/response.BalanceResponse'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка при обновлении баланса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить баланс пользователя
      tags:
      - Users
  /users/bonus:
    get:
      description: Получает текущий баланс бонусов пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Бонусы пользователя
          schema:
            $ref: '#/definitions/response.BonusResponse'
        "500":
          description: Ошибка при получении бонусов
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить текущий баланс бонусов пользователя
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновляет бонусы пользователя
      parameters:
      - description: Новый баланс бонусов
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.UpdateBonusInput'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленный баланс бонусов
          schema:
            $ref: '#/definitions/response.BonusResponse'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка при обновлении баланса бонусов
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить бонусов пользователя
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
