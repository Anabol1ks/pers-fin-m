definitions:
  auth.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  response.ErrorResponse:
    description: Стандартный ответ при ошибке
    properties:
      error:
        type: string
    type: object
  response.SuccessResponse:
    description: Стандартный ответ при успешном выполнении
    properties:
      message:
        type: string
    type: object
  response.TokenResponse:
    properties:
      token:
        example: Ваш токен
        type: string
    type: object
  transactions.TransactionInput:
    properties:
      amount:
        type: integer
      bonusChange:
        type: number
      category:
        type: integer
      currency:
        type: string
      date:
        type: string
      description:
        type: string
      title:
        type: string
    required:
    - amount
    - title
    type: object
  сategory.Category:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      userID:
        description: nil для дефолтных категорий
        type: integer
    type: object
  сategory.CreateCategoryInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
info:
  contact: {}
  title: Персональный финансовый менеджер
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя с указанием почты и пароля
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Описание ошибки валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Неверный пароль
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Пользователя с такой почтой не существует
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Авторизация
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрация пользователя с указанием никнейма, почты, пароля
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Описание ошибки валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Почта уже зарегистрированы
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Не удалось хешировать пароль или создать пользователя
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
  /categories:
    get:
      description: Получить все категории пользователя или категории по умолчанию
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/%D1%81ategory.Category'
            type: array
        "500":
          description: Ошибка при получении категорий
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить категории
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Создать новую категорию для пользователя
      parameters:
      - description: Категория для создания
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/%D1%81ategory.CreateCategoryInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/%D1%81ategory.Category'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка создания категории
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать категорию
      tags:
      - Categories
  /transactions:
    post:
      consumes:
      - application/json
      description: Создает новую транзакцию для пользователя
      parameters:
      - description: Транзакция для создания
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/transactions.TransactionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/transactions.TransactionInput'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Ошибка создания транзакции
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать транзакцию
      tags:
      - Transactions
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
