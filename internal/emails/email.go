package email

import (
	"bytes"
	"fmt"
	"html/template"
	"log"
	"net/smtp"
	"os"
)

func SendEmail(to, subject, body string) error {
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")
	fromEmail := os.Getenv("SMTP_EMAIL")
	password := os.Getenv("SMTP_PASSWORD")

	message := fmt.Sprintf(
		"From: %s\r\nTo: %s\r\nSubject: %s\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n%s",
		fromEmail, to, subject, body,
	)

	auth := smtp.PlainAuth("", fromEmail, password, smtpHost)

	err := smtp.SendMail(smtpHost+":"+smtpPort, auth, fromEmail, []string{to}, []byte(message))
	if err != nil {
		return err
	}

	return nil
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω
type VerifyData struct {
	Username string
	Code     string
}

// HTML-—à–∞–±–ª–æ–Ω –¥–ª—è –ø–∏—Å—å–º–∞.
// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤–º–µ—Å—Ç–æ %s —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {{.Username}} –∏ {{.Code}}
var emailTemplate = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="color-scheme" content="dark light">
  <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

    /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      font-size: 18px; /* –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */
    }

    body {
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #0a0a0a;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      color: #ffffff; /* —Ç–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞ –±–µ–ª—ã–π */
      line-height: 1.5;
    }

    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ */
    a, a:link, a:visited, a:hover, a:active {
      color: #ffffff !important;
      text-decoration: none;
    }

    .container {
      width: 100%;
      max-width: 600px;
      padding: 32px;
      background-color: hsl(240, 10%, 4%);
      border: 1px solid hsl(240, 5%, 26%);
      border-radius: 12px;
      box-sizing: border-box;
    }

    .header {
      text-align: center;
      padding-bottom: 24px;
      margin-bottom: 24px;
      border-bottom: 1px solid hsl(240, 5%, 26%);
    }

    .header h1 {
      font-size: 24px;
      font-weight: 700;
      margin: 0;
      color: #ffffff;
      letter-spacing: -0.5px;
    }

    .content {
      font-size: 18px; /* —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
      color: #ffffff;
      margin-bottom: 32px;
    }

    .content p {
      margin: 16px 0;
    }

    .code {
      display: inline-block;
      padding: 16px 32px;
      font-size: 24px;
      font-weight: 700;
      background-color: hsl(240, 5%, 12%);
      border: 1px solid hsl(240, 5%, 26%);
      border-radius: 8px;
      margin: 24px 0;
      color: #ffffff;
      letter-spacing: 2px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 12px 24px;
      background-color: hsl(240, 5%, 96%);
      color: #ffffff !important;
      border-radius: 6px;
      font-weight: 600;
      border: 1px solid hsl(240, 5%, 84%);
      transition: all 0.2s ease;
      margin-top: 16px;
    }

    .button:hover {
      background-color: hsl(240, 5%, 90%);
      transform: translateY(-1px);
    }

    .footer {
      font-size: 14px;
      color: #ffffff;
      text-align: center;
      padding-top: 24px;
      margin-top: 32px;
      border-top: 1px solid hsl(240, 5%, 26%);
    }

    @media (prefers-color-scheme: light) {
      body {
        background-color: #ffffff;
        /* –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–ª—ã–º –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º #ffffff,
           –Ω–æ –æ–±—ã—á–Ω–æ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ */
        color: #ffffff; 
      }

      .container {
        background-color: #ffffff;
        border-color: hsl(240, 5%, 90%);
      }

      .header h1,
      .content,
      .code,
      .footer {
        color: #ffffff;
      }

      .code {
        background-color: hsl(0, 0%, 98%);
        border-color: hsl(240, 5%, 90%);
      }
				
      .button:hover {
        background-color: hsl(240, 10%, 10%);
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h1>
    </div>

    <div class="content">
      <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{.Username}}</p>
      <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ:</p>

      <div class="code">{{.Code}}</div>

      <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
    </div>

    <div class="footer">
      <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ PFM</p>
      <p style="margin-top: 8px;">¬© 2025 PFM. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã</p>
    </div>
  </div>
</body>
</html>`

func SendVerifyCode(username, email, code string) error {
	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
	data := VerifyData{
		Username: username,
		Code:     code,
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏ –ø–∞—Ä—Å–∏–º –µ–≥–æ
	tmpl, err := template.New("verifyEmail").Parse(emailTemplate)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞:", err)
		return err
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É—Ñ–µ—Ä
	var buf bytes.Buffer
	if err = tmpl.Execute(&buf, data); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:", err)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π HTML-–∫–æ–¥ –ø–∏—Å—å–º–∞
	body := buf.String()
	subject := "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"
	if err := SendEmail(email, subject, body); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:", err)
		return err
	}

	log.Println("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	return nil
}
